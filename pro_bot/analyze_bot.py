#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""

import sqlite3
import json
from datetime import datetime, timedelta
import os

def analyze_database():
    """–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞"""
    if not os.path.exists('bot_state.sqlite3'):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    try:
        conn = sqlite3.connect('bot_state.sqlite3')
        cursor = conn.cursor()
        
        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        print(f"üìä –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {[t[0] for t in tables]}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–æ–≤
        cursor.execute("SELECT COUNT(*) FROM orders")
        orders_count = cursor.fetchone()[0]
        print(f"üìã –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {orders_count}")
        
        if orders_count > 0:
            cursor.execute("SELECT * FROM orders ORDER BY time DESC LIMIT 5")
            recent_orders = cursor.fetchall()
            print("\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞:")
            for order in recent_orders:
                print(f"  {order}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫
        cursor.execute("SELECT COUNT(*) FROM trades")
        trades_count = cursor.fetchone()[0]
        print(f"\nüí∞ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {trades_count}")
        
        if trades_count > 0:
            cursor.execute("SELECT * FROM trades ORDER BY time DESC LIMIT 5")
            recent_trades = cursor.fetchall()
            print("\nüí∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:")
            for trade in recent_trades:
                print(f"  {trade}")
            
            # PnL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("SELECT SUM(pnl), AVG(pnl), COUNT(*) FROM trades WHERE pnl > 0")
            win_stats = cursor.fetchone()
            cursor.execute("SELECT SUM(pnl), AVG(pnl), COUNT(*) FROM trades WHERE pnl < 0")
            loss_stats = cursor.fetchone()
            
            if win_stats[2] > 0 or loss_stats[2] > 0:
                total_pnl = (win_stats[0] or 0) + (loss_stats[0] or 0)
                win_rate = win_stats[2] / (win_stats[2] + loss_stats[2]) * 100
                print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"  üíö –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {win_stats[2]} (${win_stats[0]:.2f})")
                print(f"  üî¥ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {loss_stats[2]} (${loss_stats[0]:.2f})")
                print(f"  üéØ –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%")
                print(f"  üí∞ –û–±—â–∏–π PnL: ${total_pnl:.2f}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ë–î: {e}")

def analyze_logs():
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"""
    log_file = "logs/bot.log"
    if not os.path.exists(log_file):
        print("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        print(f"\nüìÑ –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ ({len(lines)} —Å—Ç—Ä–æ–∫):")
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
        error_count = sum(1 for line in lines if '"levelname": "ERROR"' in line)
        warning_count = sum(1 for line in lines if '"levelname": "WARNING"' in line)
        
        print(f"  ‚ùå –û—à–∏–±–∫–∏: {error_count}")
        print(f"  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_count}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        error_symbols = {}
        for line in lines:
            if 'screener_symbol_error' in line:
                try:
                    log_data = json.loads(line.strip())
                    symbol = log_data.get('symbol', 'unknown')
                    error_symbols[symbol] = error_symbols.get(symbol, 0) + 1
                except:
                    pass
        
        if error_symbols:
            print(f"\nüîç –°–∏–º–≤–æ–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ —Å–∫—Ä–∏–Ω–µ—Ä–∞:")
            for symbol, count in sorted(error_symbols.items(), key=lambda x: x[1], reverse=True)[:10]:
                print(f"  {symbol}: {count} –æ—à–∏–±–æ–∫")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏:")
        for line in lines[-3:]:
            try:
                log_data = json.loads(line.strip())
                timestamp = log_data.get('asctime', 'unknown')
                level = log_data.get('levelname', 'INFO')
                message = log_data.get('message', 'no message')
                print(f"  [{timestamp}] {level}: {message}")
            except:
                print(f"  {line.strip()}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤: {e}")

def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    print("ü§ñ –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    import subprocess
    try:
        result = subprocess.run(['tasklist'], capture_output=True, text=True, shell=True)
        python_processes = [line for line in result.stdout.split('\n') if 'python.exe' in line.lower()]
        print(f"üîÑ Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(python_processes)}")
        for proc in python_processes:
            if proc.strip():
                print(f"  {proc.strip()}")
    except:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã")
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    check_bot_status()
    analyze_database()
    analyze_logs()
    
    print("\n" + "=" * 50)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")



