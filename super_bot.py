import time
import requests
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from pybit.unified_trading import HTTP
import json
import os

class SmartTradingBot:
    def __init__(self):
        # API –∫–ª—é—á–∏
        self.api_key = "NNuq2b3zxIRHtk7Ei7"
        self.secret_key = "1fK71fJ8bJNHZWzR1hXq1N9iKQqHGN3RsfoX"
        self.telegram_token = "7914279468:AAE0j5FC1Jm1mIzbicVtSCK8XWXzGozCVt8"
        self.telegram_chat_id = "389193169"
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        self.session = HTTP(
            testnet=False,
            api_key=self.api_key,
            api_secret=self.secret_key,
            recv_window=5000
        )
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.leverage = 20
        self.base_risk = 0.04
        self.min_profit_close = 0.03
        self.stop_loss = 0.02
        self.take_profit = 0.08
        self.min_confidence = 0.4
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        self.coins = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "DOGEUSDT", "ADAUSDT", "AVAXUSDT"]
        
        # –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è
        self.active_positions = {}
        self.trading_stats = {
            'total_trades': 0,
            'wins': 0,
            'total_pnl': 0.0,
            'win_rate': 0.0
        }
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.strategy_performance = {'momentum': 0.5, 'volume': 0.5, 'trend': 0.5}
        
        print("‚úÖ –£–º–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø")
    
    def send_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
        try:
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
            requests.post(url, data={"chat_id": self.telegram_chat_id, "text": text}, timeout=10)
        except Exception as e:
            print(f"‚ö†Ô∏è Telegram –æ—à–∏–±–∫–∞: {e}")
    
    def get_balance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            result = self.session.get_wallet_balance(accountType="UNIFIED")
            if result['retCode'] == 0:
                for item in result['result']['list']:
                    for coin in item['coin']:
                        if coin['coin'] == 'USDT':
                            return float(coin['walletBalance'])
            return 0
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0
    
    def get_market_data(self, symbol, interval="15", limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            result = self.session.get_kline(
                category="linear", 
                symbol=symbol, 
                interval=interval, 
                limit=limit
            )
            if result['retCode'] == 0:
                data = []
                for candle in result['result']['list']:
                    data.append({
                        'close': float(candle[4]),
                        'volume': float(candle[5]),
                        'high': float(candle[2]),
                        'low': float(candle[3])
                    })
                return pd.DataFrame(data[::-1])
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None
    
    def smart_analysis(self, symbol):
        """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        df = self.get_market_data(symbol)
        if df is None or len(df) < 20:
            return None
        
        signals = {}
        
        # 1. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        sma_5 = df['close'].rolling(5).mean().iloc[-1]
        sma_15 = df['close'].rolling(15).mean().iloc[-1]
        current_price = df['close'].iloc[-1]
        
        trend_score = 0
        if sma_5 > sma_15 and current_price > sma_5:
            trend_score = 0.7
        elif sma_5 < sma_15 and current_price < sma_5:
            trend_score = -0.7
        signals['trend'] = trend_score
        
        # 2. –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
        avg_volume = df['volume'].rolling(10).mean().iloc[-1]
        current_volume = df['volume'].iloc[-1]
        volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1
        
        volume_score = 0
        if volume_ratio > 1.2:
            volume_score = 0.6 if trend_score > 0 else -0.6
        signals['volume'] = volume_score
        
        # 3. –ú–æ–º–µ–Ω—Ç—É–º –∞–Ω–∞–ª–∏–∑
        price_change = (df['close'].iloc[-1] - df['close'].iloc[-5]) / df['close'].iloc[-5]
        momentum_score = 0
        if 0.003 < price_change < 0.05:
            momentum_score = 0.5
        elif -0.05 < price_change < -0.003:
            momentum_score = -0.5
        signals['momentum'] = momentum_score
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        final_score = 0
        for strategy, score in signals.items():
            weight = self.strategy_performance.get(strategy, 0.5)
            final_score += score * weight
        
        confidence = abs(final_score) / len(signals)
        signal = 'BUY' if final_score > 0.2 else 'SELL' if final_score < -0.2 else None
        
        return {
            'signal': signal,
            'confidence': confidence,
            'price': current_price,
            'components': signals
        }
    
    def calculate_position_size(self, confidence):
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        balance = self.get_balance()
        risk_multiplier = 1 + (confidence - 0.5)
        adaptive_risk = self.base_risk * risk_multiplier
        adaptive_risk = max(0.02, min(adaptive_risk, 0.1))
        return balance * adaptive_risk * self.leverage
    
    def execute_trade(self, symbol, analysis):
        """üî• –†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø –í–ö–õ–Æ–ß–ï–ù–ê"""
        try:
            signal = analysis['signal']
            confidence = analysis['confidence']
            current_price = analysis['price']
            
            print(f"üéØ –¢–æ—Ä–≥–æ–≤–ª—è {symbol}: {signal} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence:.2%}")
            
            if confidence < self.min_confidence:
                return False
            
            position_value = self.calculate_position_size(confidence)
            qty = round(position_value / current_price, 6)
            
            if qty < 0.001:
                print(f"‚ùå –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª: {qty}")
                return False
            
            side = "Buy" if signal == "BUY" else "Sell"
            
            print(f"üì§ –†–∞–∑–º–µ—â–∞–µ–º –†–ï–ê–õ–¨–ù–´–ô –æ—Ä–¥–µ—Ä: {side} {qty} {symbol}")
            
            # üî• –†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø
            result = self.session.place_order(
                category="linear",
                symbol=symbol,
                side=side,
                orderType="Market",
                qty=str(qty)
            )
            
            print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–¥–µ—Ä–∞: {result}")
            
            if result['retCode'] == 0:
                # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π
                if side == "Buy":
                    stop_loss = current_price * (1 - self.stop_loss)
                    take_profit = current_price * (1 + self.take_profit)
                else:
                    stop_loss = current_price * (1 + self.stop_loss)
                    take_profit = current_price * (1 - self.take_profit)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                order_id = result['result']['orderId']
                self.active_positions[order_id] = {
                    'symbol': symbol,
                    'side': side,
                    'size': qty,
                    'entry_price': current_price,
                    'stop_loss': stop_loss,
                    'take_profit': take_profit,
                    'timestamp': datetime.now(),
                    'components': analysis['components'],
                    'max_profit': 0
                }
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                try:
                    self.session.set_trading_stop(
                        category="linear",
                        symbol=symbol,
                        stopLoss=str(round(stop_loss, 4)),
                        takeProfit=str(round(take_profit, 4))
                    )
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø–æ–≤: {e}")
                
                self.trading_stats['total_trades'] += 1
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = f"""üöÄ –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê

üìä {symbol} {side}
üí∞ –†–∞–∑–º–µ—Ä: {qty}
üíµ –¶–µ–Ω–∞: ${current_price:.4f}
üõ°Ô∏è Stop Loss: ${stop_loss:.4f}
üéØ Take Profit: ${take_profit:.4f}
üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}
üíπ –ü–ª–µ—á–æ: {self.leverage}x"""
                
                self.send_message(message)
                print(f"‚úÖ –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê: {symbol} {side}")
                return True
                
            else:
                error_msg = result.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞: {error_msg}")
                self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {error_msg}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ {symbol}: {e}")
            self.send_message(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ {symbol}: {e}")
            return False
    
    def manage_positions(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        if not self.active_positions:
            return
        
        print(f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {len(self.active_positions)} –ø–æ–∑–∏—Ü–∏—è–º–∏...")
        
        for order_id, pos in list(self.active_positions.items()):
            try:
                symbol = pos['symbol']
                
                ticker = self.session.get_tickers(category="linear", symbol=symbol)
                if ticker['retCode'] != 0:
                    continue
                
                current_price = float(ticker['result']['list'][0]['lastPrice'])
                entry_price = pos['entry_price']
                side = pos['side']
                
                if side == "Buy":
                    pnl_percent = (current_price - entry_price) / entry_price
                else:
                    pnl_percent = (entry_price - current_price) / entry_price
                
                if pnl_percent > pos['max_profit']:
                    pos['max_profit'] = pnl_percent
                
                should_close = False
                reason = ""
                
                # –£–º–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
                if pnl_percent >= self.min_profit_close:
                    current_analysis = self.smart_analysis(symbol)
                    if current_analysis:
                        if (side == "Buy" and current_analysis['signal'] == "SELL") or \
                           (side == "Sell" and current_analysis['signal'] == "BUY"):
                            should_close = True
                            reason = "–†–∞–∑–≤–æ—Ä–æ—Ç —Å–∏–≥–Ω–∞–ª–∞"
                        elif current_analysis['confidence'] < 0.3:
                            should_close = True
                            reason = "–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
                
                if pnl_percent >= 0.15:
                    should_close = True
                    reason = "–í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å 15%"
                
                if pos['max_profit'] > 0.08:
                    drawdown = pos['max_profit'] - pnl_percent
                    if drawdown > 0.02:
                        should_close = True
                        reason = "–¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø"
                
                hold_time = datetime.now() - pos['timestamp']
                if hold_time > timedelta(hours=8) and pnl_percent > 0.02:
                    should_close = True
                    reason = "–¢–∞–π–º-—Å—Ç–æ–ø"
                
                print(f"  üìä {symbol}: P&L {pnl_percent:.2%}, –í—Ä–µ–º—è {hold_time}")
                
                # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                if should_close:
                    print(f"üèÅ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {symbol}: {reason}")
                    
                    close_side = "Sell" if side == "Buy" else "Buy"
                    
                    result = self.session.place_order(
                        category="linear",
                        symbol=symbol,
                        side=close_side,
                        orderType="Market",
                        qty=str(pos['size']),
                        reduceOnly=True
                    )
                    
                    if result['retCode'] == 0:
                        if pnl_percent > 0:
                            self.trading_stats['wins'] += 1
                        
                        self.trading_stats['total_pnl'] += pnl_percent
                        self.trading_stats['win_rate'] = (self.trading_stats['wins'] / self.trading_stats['total_trades']) * 100
                        
                        self.update_strategy_performance(pos, pnl_percent)
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        pnl_emoji = "üü¢" if pnl_percent > 0 else "üî¥"
                        message = f"""üèÅ –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê {pnl_emoji}

üìä {symbol} {side}
üìà P&L: {pnl_percent:.2%}
üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${pnl_percent * pos['size'] * entry_price:.2f}
üéØ –ü—Ä–∏—á–∏–Ω–∞: {reason}
‚è∞ –í—Ä–µ–º—è: {hold_time}"""
                        
                        self.send_message(message)
                        print(f"‚úÖ –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê: {symbol} {pnl_percent:.2%}")
                        
                        del self.active_positions[order_id]
                        
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {result.get('retMsg')}")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π {symbol}: {e}")
                
    def update_strategy_performance(self, pos, pnl_percent):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        components = pos.get('components', {})
        
        for strategy, score in components.items():
            if strategy in self.strategy_performance:
                if pnl_percent > 0:
                    self.strategy_performance[strategy] = min(1.0, self.strategy_performance[strategy] + pnl_percent * 0.1)
                else:
                    self.strategy_performance[strategy] = max(0.1, self.strategy_performance[strategy] + pnl_percent * 0.05)
        
        print(f"üß† –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.strategy_performance}")
    
    def send_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        balance = self.get_balance()
        stats = self.trading_stats
        
        report = f"""üìä –û–¢–ß–ï–¢ –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê

üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}
üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}
‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['wins']}
üìä Win Rate: {stats['win_rate']:.1f}%
üíπ –û–±—â–∏–π P&L: {stats['total_pnl']:.2%}
üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.active_positions)}

üß† –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:
‚Ä¢ –¢—Ä–µ–Ω–¥: {self.strategy_performance['trend']:.1%}
‚Ä¢ –û–±—ä–µ–º—ã: {self.strategy_performance['volume']:.1%}  
‚Ä¢ –ú–æ–º–µ–Ω—Ç—É–º: {self.strategy_performance['momentum']:.1%}

‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
        
        self.send_message(report)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò")
        
        balance = self.get_balance()
        if balance < 10:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–º–∏–Ω–∏–º—É–º $10)")
            return
        
        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
        self.send_message(f"ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù - –†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø!\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\nüéØ –ü–ª–µ—á–æ: {self.leverage}x")
        
        cycle = 0
        last_report = datetime.now()
        
        try:
            while True:
                cycle += 1
                print(f"\n{'='*50}")
                print(f"üîÑ –¶–ò–ö–õ #{cycle} - {datetime.now().strftime('%H:%M:%S')}")
                print(f"{'='*50}")
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
                self.manage_positions()
                
                # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                if len(self.active_positions) < 3:
                    print(f"\nüîç –ü–û–ò–°–ö –°–ò–ì–ù–ê–õ–û–í ({len(self.active_positions)}/3 –ø–æ–∑–∏—Ü–∏–π)...")
                    
                    for coin in self.coins:
                        if any(pos['symbol'] == coin for pos in self.active_positions.values()):
                            continue
                        
                        analysis = self.smart_analysis(coin)
                        
                        if analysis and analysis['signal'] and analysis['confidence'] >= self.min_confidence:
                            print(f"üéØ –°–ò–ì–ù–ê–õ {analysis['signal']} –¥–ª—è {coin} ({analysis['confidence']:.1%})")
                            
                            success = self.execute_trade(coin, analysis)
                            if success:
                                time.sleep(5)
                        
                        time.sleep(2)
                else:
                    print("üìä –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (3/3)")
                
                # –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
                if (datetime.now() - last_report).seconds > 7200:
                    self.send_report()
                    last_report = datetime.now()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                balance = self.get_balance()
                print(f"\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
                print(f"üìä –ü–æ–∑–∏—Ü–∏–π: {len(self.active_positions)}")
                print(f"üìà –°–¥–µ–ª–æ–∫: {self.trading_stats['total_trades']}")
                print(f"‚úÖ Win Rate: {self.trading_stats['win_rate']:.1f}%")
                
                print(f"\nüò¥ –ü–∞—É–∑–∞ 90 —Å–µ–∫—É–Ω–¥...")
                time.sleep(90)
                
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            self.send_message("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.send_message(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("üî• –í–ù–ò–ú–ê–ù–ò–ï: –†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
    print("üí∞ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    print("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è —Å –ø–ª–µ—á–æ–º —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–∏—Å–∫–∞–º–∏")
    
    confirm = input("\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ (–¥–∞/–Ω–µ—Ç): ")
    
    if confirm.lower() in ['–¥–∞', 'yes', 'y', '1']:
        try:
            bot = SmartTradingBot()
            balance = bot.get_balance()
            
            if balance > 0:
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
                bot.run()
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    else:
        print("‚ùå –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
